service: services-integrator-api

plugins:
  - serverless-offline
  - serverless-prune-plugin

custom:  
  secrets: ${file(secrets-${opt:stage, self:provider.stage}.json)}
  serverless-offline:
    httpPort: 4000   
  USER_POO_ID_OFFLINE: ${self:custom.secrets.USER_POO_ID_OFFLINE}
  bucketPublic: ${self:service}-${opt:stage, self:provider.stage}-public
  VIVINO_API_URL: ${self:custom.secrets.VIVINO_API_URL}
  DB_HOST: ${self:custom.secrets.DB_HOST}  
  DB_NAME: services_db
  DB_USERNAME: root
  DB_PASSWORD: ${self:custom.secrets.DB_PASSWORD}    
  DB_PORT: 3306 
 
  # prune:
  #   automatic: true
  #   number: 3
  
provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  logRetentionInDays: 7
  stage: dev
  region: us-east-1
  memorySize: 256

  apiGateway:
    shouldStartNameWithService: true
  environment:
    USER_POO_ID_OFFLINE: ${self:custom.USER_POO_ID_OFFLINE} # quando o projeto está rodando local   
    USER_POO_ID: !Ref UserPool    
    REGION: ${opt:region, self:provider.region}
    STAGE: ${opt:stage, self:provider.stage}    
    SERVICE_NAME: ${self:service}-${opt:stage, self:provider.stage}
    SQS_URL: "https://sqs.${opt:region, self:provider.region}.amazonaws.com/${aws:accountId}/${self:service}-${opt:stage, self:provider.stage}"
    DB_HOST: ${self:custom.DB_HOST}         
    DB_NAME: ${self:custom.DB_NAME}
    DB_USER: ${self:custom.DB_USERNAME}
    DB_PASS: ${self:custom.DB_PASSWORD}
    DB_PORT: ${self:custom.DB_PORT}
    EMAIL_FROM_SENDER: ${self:custom.secrets.EMAIL_FROM_SENDER}
    
  package:
    excludeDevDependencies: true  
    exclude:
      - .git/**
      - .vscode/**        
      - venv/**
      - node_modules/**
      - keys.bat     
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:Admin*
            - cognito-idp:DescribeIdentityProvider
            - cognito-idp:DescribeResourceServer
            - cognito-idp:DescribeUserPool
            - cognito-idp:DescribeUserPoolClient
            - cognito-idp:DescribeUserPoolDomain
            - cognito-idp:GetGroup
            - cognito-idp:ListGroups
            - cognito-idp:ListUserPoolClients
            - cognito-idp:ListUsers
            - cognito-idp:ListUsersInGroup
            - cognito-idp:UpdateGroup
          Resource: !GetAtt UserPool.Arn        
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource:
            - "*"  
        - Effect: "Allow"
          Action:
            - "sqs:*"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "events:ListRules"
            - "events:PutRule"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "ses:SendEmail"
          Resource: "*"

functions:
  - ${file(src/serverless/functions/VerifyToken.yml)}
  - ${file(src/serverless/functions/Dashboard.yml)}
  - ${file(src/serverless/functions/Groups.yml)}
  - ${file(src/serverless/functions/Users.yml)}
  - ${file(src/serverless/functions/Wines.yml)}
  - ${file(src/serverless/functions/WinesVivinoIntegration.yml)}
  - ${file(src/serverless/functions/Companies.yml)}
  - ${file(src/serverless/functions/ShippingCompanies.yml)}
  - ${file(src/serverless/functions/Romanians.yml)}  
  - ${file(src/serverless/functions/Sales.yml)}  
  - ${file(src/serverless/functions/Expenses.yml)}  
  - ${file(src/serverless/functions/Eventsbridge.yml)}
    
# você pode adicionar modelos de recursos do CloudFormation aqui
resources:
  - ${file(src/serverless/resources/UserPool.yml)}
  - ${file(src/serverless/resources/UserPoolGroups.yml)}
  - ${file(src/serverless/resources/UserPoolClient.yml)}
  - ${file(src/serverless/resources/UserPoolRoules.yml)}
  - ${file(src/serverless/resources/GatewayResponseErrors.yml)}  
  - ${file(src/serverless/resources/S3Bukets.yml)} 
  - ${file(src/serverless/resources/Queues.yml)} 